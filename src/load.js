import * as main from "main";

// TODO: Restructure this into a game state for cleaner code.

let models = {};
let images = {};
let textures = {};
let data = {};

function load_assets( source_json, scene, finish_callback ){
  console.log(source_json);
  

  function text_loaded( task, key ){
    console.log(key);
    console.log(task);
  }

  function asset_error( task, key ){
    console.log('Error: ');
    console.log(task);
    console.log(key);
  }

  let manager = new BABYLON.AssetsManager(scene);
  
  for (let key in source_json.meshes) {
    let model_task = manager.addMeshTask(key + '_task',
        "", "assets/",  source_json.meshes[key]);
    model_task.onSuccess = (task) => {
      let mesh = task.loadedMeshes[0]; // TODO: Multimesh files
      mesh.visibility = 0; // Clone this later
      models[key] = mesh;
    }

    model_task.onError = (task) => {
      // TODO: Why is this getting called on successes too?
      // asset_error(task, key);
    }

  }
  

  //for (let key in source_json.data){
  //  let data_task = manager.addTextTask(key + '_task',
  //    "", "data/", source_json.data[key]);
  //  data_task.onSuccess = (task) => {
  //    data_loaded(task, key);
  //  }
  //}

  manager.onFinish = () => {
    finish_callback();
  }

  manager.load();
}



// TODO: Assets.json could easily be generated by a script

$(() => {
  let systems, spobs, models, images;
  let game_canvas = $('#gameCanvas');
  let engine = new BABYLON.Engine( game_canvas[0], true);
  let scene = new BABYLON.Scene(engine);
  
  // TODO: Set up a nice little loading screen in a canvas

  $.getJSON('data/assets.json', (data) => {
    load_assets(data, scene, () => {
      // TODO: Replace this with AssetManager text loads
      $.when(
        $.getJSON('data/systems.json', ( data ) =>  {
          systems = data;
          console.log(data);
        }),
        $.getJSON('data/spobs.json', ( data ) => {
          spobs = data;
          console.log(data);
        })
      ).then( () => {
        if (systems && spobs ) {
          main.init(
            game_canvas, scene, engine,
            systems, spobs, models, images
          );
        }
      });
    });
  });
}); 
